/-
Copyright (c) 2022 Wrenna Robson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Wrenna Robson
-/

import analysis.normed_space.basic

/-!
# Hamming spaces

The Hamming metric counts the number of places two members of a (finite) Pi type
differ. The Hamming norm is the same as the Hamming metric over additive groups, and
counts the number of places a member of a (finite) Pi type differs from zero.

This is a useful notion in various applications, but in particular it is relevant
in coding theory, in which it is fundamental for defining the minimum distance of a
code.

In this file we define `hamm Œ≤`, the type synonym of a Pi type with the Hamming
distance `hamm_dist` and weight `hamm_wt` attached, and the various instances that arise
from the properties of these definitions.

-/

/--
Type synonym for a Pi type which we equip with the Hamming metric, adding all relevant
instances as needed.
-/
def hamm {Œπ : Type*} (Œ≤ : Œπ ‚Üí Type*) : Type* := Œ† i, Œ≤ i

namespace hamm

section
instance {Œπ : Type*} (Œ≤ : Œπ ‚Üí Type*) [Œ† i, inhabited (Œ≤ i)] : inhabited (hamm Œ≤) :=
‚ü®Œª i, default‚ü©

local notation `ùìó[` K`,` n`]` := hamm (Œª _ : fin n, K)

variables {Œ± Œπ : Type*} {Œ≤ : Œπ ‚Üí Type*}

/-- `to_hamm` is the identity function to the `hamm` of a type.  -/
@[pattern] def to_hamm : (Œ† i, Œ≤ i) ‚âÉ hamm Œ≤ := equiv.refl _

/-- `of_hamm` is the identity function from the `hamm` of a type.  -/
@[pattern] def of_hamm : hamm Œ≤ ‚âÉ Œ† i, Œ≤ i := equiv.refl _

@[simp] lemma to_hamm_symm_eq                 : (@to_hamm _ Œ≤).symm = of_hamm := rfl
@[simp] lemma of_hamm_symm_eq                 : (@of_hamm _ Œ≤).symm = to_hamm := rfl
@[simp] lemma to_hamm_of_hamm (x : hamm Œ≤)    : to_hamm (of_hamm x) = x := rfl
@[simp] lemma of_hamm_to_hamm (x : Œ† i, Œ≤ i)  : of_hamm (to_hamm x) = x := rfl
@[simp] lemma to_hamm_inj {x y : Œ† i, Œ≤ i}    : to_hamm x = to_hamm y ‚Üî x = y := iff.rfl
@[simp] lemma of_hamm_inj {x y : hamm Œ≤}      : of_hamm x = of_hamm y ‚Üî x = y := iff.rfl

instance [Œ† i, has_zero (Œ≤ i)] : has_zero (hamm Œ≤) := pi.has_zero
instance [Œ† i, has_sub (Œ≤ i)] : has_sub (hamm Œ≤) := pi.has_sub
instance [Œ† i, has_scalar Œ± (Œ≤ i)] : has_scalar Œ± (hamm Œ≤) := pi.has_scalar
instance [has_zero Œ±] [Œ† i, has_zero (Œ≤ i)] [Œ† i, smul_with_zero Œ± (Œ≤ i)] :
smul_with_zero Œ± (hamm Œ≤) := pi.smul_with_zero _
instance [Œ† i, add_monoid (Œ≤ i)] : add_monoid (hamm Œ≤) := pi.add_monoid
instance [Œ† i, add_comm_monoid (Œ≤ i)] : add_comm_monoid (hamm Œ≤) := pi.add_comm_monoid
instance [Œ† i, add_comm_group (Œ≤ i)] : add_comm_group (hamm Œ≤) := pi.add_comm_group
instance (Œ±) [semiring Œ±] (Œ≤: Œπ ‚Üí Type*) [Œ† i, add_comm_monoid (Œ≤ i)]
[Œ† i, module Œ± (Œ≤ i)] : module Œ± (hamm Œ≤) := pi.module _ _ _

end

/-
We define `hamm_dist` and `hamm_wt` over Pi types, and will later attach them to our type
synonym.
-/

section
open fintype

variables {Œ± Œπ : Type*} {Œ≤ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, decidable_eq (Œ≤ i)]

/-- The Hamming distance function to the naturals. -/

def hamm_dist (x y : Œ† i, Œ≤ i) := card {i // x i ‚â† y i}

lemma hamm_dist_smul_le [Œ† i, has_scalar Œ± (Œ≤ i)] (k : Œ±) (x y : Œ† i, Œ≤ i) :
  hamm_dist (k ‚Ä¢ x) (k ‚Ä¢ y) ‚â§ hamm_dist x y :=
card_subtype_mono _ _ (Œª i h H, h (by rw [pi.smul_apply, pi.smul_apply, H]))

lemma hamm_dist_smul [Œ† i, has_scalar Œ± (Œ≤ i)] {k : Œ±}
  (hk : ‚àÄ i, is_smul_regular (Œ≤ i) k) (x y : Œ† i, Œ≤ i) :
  hamm_dist x y = hamm_dist (k ‚Ä¢ x) (k ‚Ä¢ y) :=
le_antisymm (card_subtype_mono _ _ (Œª _ h H, h (hk _ H))) (hamm_dist_smul_le _ _ _)

lemma hamm_dist_eq (x y : Œ† i, Œ≤ i) : hamm_dist x y = card {i // x i ‚â† y i} := rfl

lemma hamm_dist_comm (x y : Œ† i, Œ≤ i) : hamm_dist x y = hamm_dist y x :=
by simp_rw [hamm_dist_eq, ne_comm]

lemma hamm_dist_triangle (x y z : Œ† i, Œ≤ i) :
  hamm_dist x z ‚â§ hamm_dist x y + hamm_dist y z :=
begin
  simp_rw hamm_dist_eq,
  refine le_trans (card_subtype_mono _ _ (Œª _ h, _)) (card_subtype_or _ _),
  by_contra' H, exact h (eq.trans H.1 H.2)
end

lemma hamm_dist_eq_zero {x y : Œ† i, Œ≤ i} : hamm_dist x y = 0 ‚Üî x = y :=
begin
  rw [function.funext_iff, hamm_dist_eq, card_eq_zero_iff],
  exact ‚ü® Œª h i, imp_of_not_imp_not _ _ (Œª H, h.elim' ‚ü®i, H‚ü©) h,
          Œª h, subtype.is_empty_of_false (Œª i H, H (h _))‚ü©
end

@[simp] lemma hamm_dist_self (x : Œ† i, Œ≤ i) : hamm_dist x x = 0 := hamm_dist_eq_zero.mpr rfl

lemma eq_of_hamm_dist_eq_zero (x y : Œ† i, Œ≤ i) : hamm_dist x y = 0 ‚Üí x = y :=
hamm_dist_eq_zero.mp

lemma hamm_dist_ne_zero {x y : Œ† i, Œ≤ i} : hamm_dist x y ‚â† 0 ‚Üî x ‚â† y :=
not_iff_not.mpr hamm_dist_eq_zero

lemma hamm_dist_pos {x y : Œ† i, Œ≤ i} : 0 < hamm_dist x y ‚Üî x ‚â† y :=
by rw [‚Üêhamm_dist_ne_zero, iff_not_comm, not_lt, nat.le_zero_iff]

@[simp] lemma hamm_dist_eq_zero_iff_forall_eq {x y : Œ† i, Œ≤ i} :
  hamm_dist x y = 0 ‚Üî ‚àÄ i, x i = y i :=
by rw [hamm_dist_eq_zero, function.funext_iff]

lemma hamm_dist_ne_zero_iff_exists_ne {x y : Œ† i, Œ≤ i} :
  hamm_dist x y ‚â† 0 ‚Üî ‚àÉ i, x i ‚â† y i :=
by rw [hamm_dist_ne_zero, function.ne_iff]

section has_zero

variable [Œ† i, has_zero (Œ≤ i)]

/-- The Hamming weight function to the naturals. -/

def hamm_wt (x : Œ† i, Œ≤ i) : ‚Ñï := hamm_dist x 0

lemma hamm_wt_eq (x : Œ† i, Œ≤ i) : hamm_wt x = card {i // x i ‚â† 0} := rfl

lemma hamm_wt_eq_hamm_dist_zero (x : Œ† i, Œ≤ i) : hamm_wt x = hamm_dist x 0 := rfl

lemma hamm_wt_smul_le [has_zero Œ±] [Œ† i, smul_with_zero Œ± (Œ≤ i)] (k : Œ±)
  (x : Œ† i, Œ≤ i) : hamm_wt (k ‚Ä¢ x) ‚â§ hamm_wt x :=
by convert hamm_dist_smul_le k x _; rw smul_zero'; refl

lemma hamm_wt_smul [has_zero Œ±] [Œ† i, smul_with_zero Œ± (Œ≤ i)] {k : Œ±}
  (hk : ‚àÄ i, is_smul_regular (Œ≤ i) k) (x : Œ† i, Œ≤ i) : hamm_wt x = hamm_wt (k ‚Ä¢ x) :=
by convert hamm_dist_smul hk _ _; rw smul_zero'; refl

@[simp] lemma hamm_wt_eq_zero {x : Œ† i, Œ≤ i} : hamm_wt x = 0 ‚Üî x = 0 := hamm_dist_eq_zero

@[simp] lemma hamm_wt_zero : hamm_wt (0 : Œ† i, Œ≤ i) = 0 := hamm_dist_self _

lemma hamm_wt_ne_zero {x : Œ† i, Œ≤ i} : hamm_wt x ‚â† 0 ‚Üî x ‚â† 0 := hamm_dist_ne_zero

lemma hamm_wt_pos {x : Œ† i, Œ≤ i} : 0 < hamm_wt x ‚Üî x ‚â† 0 := hamm_dist_pos

@[simp] lemma hamm_wt_zero_iff_forall_zero {x : Œ† i, Œ≤ i} : hamm_wt x = 0 ‚Üî ‚àÄ i, x i = 0 :=
hamm_dist_eq_zero_iff_forall_eq

lemma hamm_wt_pos_iff_exists_nz {x : Œ† i, Œ≤ i} : hamm_wt x ‚â† 0 ‚Üî ‚àÉ i, x i ‚â† 0 :=
hamm_dist_ne_zero_iff_exists_ne

end has_zero

lemma hamm_dist_eq_hamm_wt_sub [Œ† i, add_group (Œ≤ i)] (x y : Œ† i, Œ≤ i) :
  hamm_dist x y = hamm_wt (x - y) :=
by simp_rw [hamm_wt_eq, hamm_dist_eq, pi.sub_apply, sub_ne_zero]

end

section

variables {Œ± Œπ : Type*} {Œ≤ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, decidable_eq (Œ≤ i)]

instance : has_dist (hamm Œ≤) := ‚ü®Œª x y, hamm_dist x y‚ü©

@[simp, push_cast] lemma dist_eq_hamm_dist (x y : hamm Œ≤) : dist x y = hamm_dist x y := rfl

instance : pseudo_metric_space (hamm Œ≤) :=
{ dist_self           := by push_cast; exact_mod_cast hamm_dist_self,
  dist_comm           := by push_cast; exact_mod_cast hamm_dist_comm,
  dist_triangle       := by push_cast; exact_mod_cast hamm_dist_triangle,
  ..hamm.has_dist }

instance : metric_space (hamm Œ≤) :=
{ eq_of_dist_eq_zero  := by push_cast; exact_mod_cast eq_of_hamm_dist_eq_zero,
  ..hamm.pseudo_metric_space }

instance [Œ† i, has_zero (Œ≤ i)] : has_norm (hamm Œ≤) := ‚ü®Œª x, hamm_wt x‚ü©

@[simp, push_cast] lemma norm_eq_hamm_wt [Œ† i, has_zero (Œ≤ i)] (x : hamm Œ≤) :
  ‚à•x‚à• = hamm_wt x := rfl

instance [Œ† i, add_comm_group (Œ≤ i)] : semi_normed_group (hamm Œ≤) :=
{ dist_eq := by push_cast; exact_mod_cast hamm_dist_eq_hamm_wt_sub, ..pi.add_comm_group }

instance [Œ† i, add_comm_group (Œ≤ i)] : normed_group (hamm Œ≤) := { ..hamm.semi_normed_group }

/-
instance [Œ† i, add_comm_group (Œ≤ i)] {Œ± : Type*} [semiring Œ±]
[Œ† i, module Œ± (Œ≤ i)] : normed_space Œ± (hamm Œ≤) :=
{ norm_smul_le := sorry, ..hamm.module Œ± Œ≤ }
-/

end

end hamm
