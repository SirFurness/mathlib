/-
Copyright (c) 2022 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import algebraic_geometry.AffineScheme
import algebraic_geometry.pullbacks

/-!
# Properties of morphisms

We provide the basic framework for talking about properties of morphisms.
The following meta-properties are defined

* `respects_iso`: `P` respects isomorphisms if `P f ‚Üí P (e ‚â´ f)` and `P f ‚Üí P (f ‚â´ e)`, where
  `e` is an isomorphism.
* `stable_under_composition`: `P` is stable under composition if `P f ‚Üí P g ‚Üí P (f ‚â´ g)`.
* `stable_under_base_change`: `P` is stable under base change if `P (Y ‚ü∂ S) ‚Üí P (X √ó[S] Y ‚ü∂ X)`.

-/

universe u

open topological_space category_theory category_theory.limits opposite

noncomputable theory

namespace algebraic_geometry

/-- A `morphism_property` is a class of morphisms between schemes. -/
def morphism_property := ‚àÄ ‚¶ÉX Y : Scheme‚¶Ñ (f : X ‚ü∂ Y), Prop

/-- An `affine_target_morphism_property` is a class of morphisms from an arbitrary scheme into an
affine scheme. -/
def affine_target_morphism_property := ‚àÄ ‚¶ÉX Y : Scheme‚¶Ñ (f : X ‚ü∂ Y) [is_affine Y], Prop

/-- `is_iso` as an `morphism_property`. -/
protected def is_iso : morphism_property := @is_iso Scheme

/-- `is_iso` as an `morphism_property`. -/
protected def affine_target_is_iso : affine_target_morphism_property :=
Œª X Y f H, is_iso f

instance : lattice morphism_property :=
{ le := Œª P‚ÇÅ P‚ÇÇ, ‚àÄ ‚¶ÉX Y : Scheme‚¶Ñ (f : X ‚ü∂ Y), P‚ÇÅ f ‚Üí P‚ÇÇ f,
  le_refl := Œª P X Y f H, H,
  le_trans := Œª P‚ÇÅ P‚ÇÇ P‚ÇÉ h‚ÇÅ h‚ÇÇ X Y f, h‚ÇÇ f ‚àò h‚ÇÅ f,
  le_antisymm := Œª P‚ÇÅ P‚ÇÇ h‚ÇÅ h‚ÇÇ, funext $ Œª _, funext $ Œª _, funext $ Œª f, propext ‚ü®h‚ÇÅ f, h‚ÇÇ f‚ü©,

  sup := Œª P‚ÇÅ P‚ÇÇ X Y f, P‚ÇÅ f ‚à® P‚ÇÇ f,
  le_sup_left  := Œª P‚ÇÅ P‚ÇÇ X Y f H, or.inl H,
  le_sup_right := Œª P‚ÇÅ P‚ÇÇ X Y f H, or.inr H,
  sup_le := Œª P‚ÇÅ P‚ÇÇ P‚ÇÉ h‚ÇÅ h‚ÇÇ X Y f H, or.cases_on H (h‚ÇÅ f) (h‚ÇÇ f),

  inf := Œª P‚ÇÅ P‚ÇÇ X Y f, P‚ÇÅ f ‚àß P‚ÇÇ f,
  inf_le_left  := Œª P‚ÇÅ P‚ÇÇ X Y f H, H.1,
  inf_le_right := Œª P‚ÇÅ P‚ÇÇ X Y f H, H.2,
  le_inf := Œª P‚ÇÅ P‚ÇÇ P‚ÇÉ h‚ÇÅ h‚ÇÇ X Y f H, ‚ü®h‚ÇÅ f H, h‚ÇÇ f H‚ü© }

/-- A `affine_target_morphism_property` can be extended to a `morphism_property` such that it
*never* holds when the target is not affine -/
def affine_target_morphism_property.to_property (P : affine_target_morphism_property) :
  morphism_property :=
Œª X Y f, ‚àÉ h, @@P f h

lemma affine_target_morphism_property.to_property_apply (P : affine_target_morphism_property)
  {X Y : Scheme} (f : X ‚ü∂ Y) [is_affine Y] :
  P.to_property f ‚Üî P f := by { delta affine_target_morphism_property.to_property, simp [*] }

/-- A morphism property `respects_iso` if it still holds when composed with an isomorphism -/
def respects_iso (P : morphism_property) :=
  (‚àÄ {X Y Z} (e : X ‚âÖ Y) (f : Y ‚ü∂ Z), P f ‚Üí P (e.hom ‚â´ f)) ‚àß
  (‚àÄ {X Y Z} (e : Y ‚âÖ Z) (f : X ‚ü∂ Y), P f ‚Üí P (f ‚â´ e.hom))

/-- A morphism property is `stable_under_composition` if the composition of two such morphisms
still falls in the class. -/
def stable_under_composition (P : morphism_property) :=
  ‚àÄ ‚¶ÉX Y Z‚¶Ñ (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), P f ‚Üí P g ‚Üí P (f ‚â´ g)

/-- A morphism property is `stable_under_composition` if the base change of such a morphism
still falls in the class. -/
def stable_under_base_change
  (P : morphism_property) : Prop :=
‚àÄ ‚¶ÉX Y S : Scheme‚¶Ñ (f : X ‚ü∂ S) (g : Y ‚ü∂ S), P g ‚Üí P (pullback.fst : pullback f g ‚ü∂ X)

lemma stable_under_composition.respects_iso {P : morphism_property}
  (hP : stable_under_composition P) (hP' : ‚àÄ {X Y} (e : X ‚âÖ Y), P e.hom) : respects_iso P :=
‚ü®Œª X Y Z e f hf, hP _ _ (hP' e) hf, Œª X Y Z e f hf, hP _ _ hf (hP' e)‚ü©

lemma respects_iso.cancel_left_is_iso {P : morphism_property}
  (hP : respects_iso P) {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso f] :
    P (f ‚â´ g) ‚Üî P g :=
‚ü®Œª h, by simpa using hP.1 (as_iso f).symm (f ‚â´ g) h, hP.1 (as_iso f) g‚ü©

lemma respects_iso.cancel_right_is_iso {P : morphism_property}
  (hP : respects_iso P) {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso g] :
    P (f ‚â´ g) ‚Üî P f :=
‚ü®Œª h, by simpa using hP.2 (as_iso g).symm (f ‚â´ g) h, hP.2 (as_iso g) f‚ü©

lemma respects_iso.affine_cancel_left_is_iso {P : affine_target_morphism_property}
  (hP : respects_iso P.to_property) {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso f]
    [is_affine Z] : P (f ‚â´ g) ‚Üî P g :=
by convert hP.cancel_left_is_iso f g; rw P.to_property_apply

lemma respects_iso.affine_cancel_right_is_iso {P : affine_target_morphism_property}
  (hP : respects_iso P.to_property) {X Y Z : Scheme} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [is_iso g]
  [is_affine Y] [is_affine Z] : P (f ‚â´ g) ‚Üî P f :=
by convert hP.cancel_right_is_iso f g; rw P.to_property_apply

/-- This is here to mirror `stable_under_base_change.snd`. -/
@[nolint unused_arguments]
lemma stable_under_base_change.fst {P : morphism_property}
  (hP : stable_under_base_change P) (hP' : respects_iso P) {X Y S : Scheme} (f : X ‚ü∂ S)
  (g : Y ‚ü∂ S) (H : P g) : P (pullback.fst : pullback f g ‚ü∂ X) :=
hP f g H

lemma stable_under_base_change.snd {P : morphism_property}
  (hP : stable_under_base_change P) (hP' : respects_iso P) {X Y S : Scheme} (f : X ‚ü∂ S)
  (g : Y ‚ü∂ S) (H : P f) : P (pullback.snd : pullback f g ‚ü∂ Y) :=
begin
  rw [‚Üê pullback_symmetry_hom_comp_fst, hP'.cancel_left_is_iso],
  exact hP g f H
end

lemma stable_under_base_change.base_change_obj {P : morphism_property}
  (hP : stable_under_base_change P) (hP' : respects_iso P) {S S' : Scheme} (f : S' ‚ü∂ S)
  (X : over S) (H : P X.hom) : P ((base_change f).obj X).hom :=
hP.snd hP' X.hom f H

lemma stable_under_base_change.base_change_map {P : morphism_property}
  (hP : stable_under_base_change P) (hP' : respects_iso P) {S S' : Scheme} (f : S' ‚ü∂ S)
  {X Y : over S} (g : X ‚ü∂ Y) (H : P g.left) : P ((base_change f).map g).left :=
begin
  let e := pullback_right_pullback_fst_iso Y.hom f g.left ‚â™‚â´
    pullback.congr_hom (g.w.trans (category.comp_id _)) rfl,
  have : e.inv ‚â´ pullback.snd = ((base_change f).map g).left,
  { apply pullback.hom_ext; dsimp; simp },
  rw [‚Üê this, hP'.cancel_left_is_iso],
  apply hP.snd hP',
  exact H
end

lemma stable_under_base_change.pullback_map {P : morphism_property}
  (hP : stable_under_base_change P) (hP' : respects_iso P)
  (hP'' : stable_under_composition P) {S X X' Y Y' : Scheme}
  {f : X ‚ü∂ S} {g : Y ‚ü∂ S} {f' : X' ‚ü∂ S} {g' : Y' ‚ü∂ S} {i‚ÇÅ : X ‚ü∂ X'} {i‚ÇÇ : Y ‚ü∂ Y'}
  (h‚ÇÅ : P i‚ÇÅ) (h‚ÇÇ : P i‚ÇÇ) (e‚ÇÅ : f = i‚ÇÅ ‚â´ f') (e‚ÇÇ : g = i‚ÇÇ ‚â´ g') :
    P (pullback.map f g f' g' i‚ÇÅ i‚ÇÇ (ùüô _)
      ((category.comp_id _).trans e‚ÇÅ) ((category.comp_id _).trans e‚ÇÇ)) :=
begin
  have : pullback.map f g f' g' i‚ÇÅ i‚ÇÇ (ùüô _)
    ((category.comp_id _).trans e‚ÇÅ) ((category.comp_id _).trans e‚ÇÇ) =
      ((pullback_symmetry _ _).hom ‚â´
      ((base_change _).map (over.hom_mk _ e‚ÇÇ.symm : over.mk g ‚ü∂ over.mk g')).left) ‚â´
      (pullback_symmetry _ _).hom ‚â´
      ((base_change g').map (over.hom_mk _ e‚ÇÅ.symm : over.mk f ‚ü∂ over.mk f')).left,
  { apply pullback.hom_ext; dsimp; simp },
  rw this,
  apply hP''; rw hP'.cancel_left_is_iso,
  exacts [hP.base_change_map hP' _ (over.hom_mk _ e‚ÇÇ.symm : over.mk g ‚ü∂ over.mk g') h‚ÇÇ,
    hP.base_change_map hP' _ (over.hom_mk _ e‚ÇÅ.symm : over.mk f ‚ü∂ over.mk f') h‚ÇÅ],
end

end algebraic_geometry
#lint
